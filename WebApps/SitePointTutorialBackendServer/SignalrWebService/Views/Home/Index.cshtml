<div class="jumbotron">
    <h1>SignalR/Web API 2.0 service</h1>
    <p class="lead">This service pushes performance data out in real-time about itself and about the server which it is hosted in. Additionally a JavaScript proxy is generated so that the data can be easily consumed by a client application.</p>
</div>
<div class="jumbotron">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="panel-title">Server Side Data</h3>
        </div>
        <div class="panel-body">

            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>Performance Type</th>
                        <th>Performance Value</th>
                    </tr>
                </thead>
                <tbody id="discussion"></tbody>
            </table>

        </div>
    </div>
</div>


@section scripts {

    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function () {
            // Declare a proxy to reference the hub.
            $.connection.url = "localhost/signalr";
            var realtimePerformanceHub = $.connection.performanceHub;

            console.log('connected');


            // Create a function that the hub can call to broadcast messages.
            realtimePerformanceHub.client.broadcastPerformance = function (backendPerformanceMonitors) {
                console.log('got called back');
                backendPerformanceMonitors.forEach(function (performanceMetric) {
                    var bootStrapClasses = new Array("danger", "warning", "active", "success", "info", "primary");
                    var randomBootStrap = bootStrapClasses[Math.floor(Math.random() * bootStrapClasses.length)];
                    $('#discussion').append('<tr class=' + randomBootStrap + '><td>' + performanceMetric.counterName + '</td>'
                    + '<td>' + performanceMetric.value + '</td></tr>').focus();
                    console.log(performanceMetric);
                })
            };

            $.connection.hub.logging = true;

            // Start the connection.
            $.connection.hub.start().done(

                function () {
                    console.log("Connected, transport = " + $.connection.hub.transport.name);
                    realtimePerformanceHub.server.monitoringFor().done(function (backendPerformanceMonitors) {
                        console.log(backendPerformanceMonitors.length);
                        $.each(backendPerformanceMonitors, function (j, backendPerformanceMonitor) {
                            console.log(backendPerformanceMonitors);
                        })

                    }).fail(function (error) {
                        alert('monitoringFor error: ' + error)
                        console.log('monitoringFor error: ' + error)
                    });
                }).done(function () {

                    console.log('Now connected, connection ID=' + $.connection.hub.id);
                })
                .fail(function () {

                    console.log('Could not connect');
                });

        });

    </script>
}
